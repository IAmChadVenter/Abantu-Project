@model HelpDeskIntegration.Models.CreateTicketDynamicModel
@{
    ViewBag.Title = "CreateTicket";

}
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<style>
    .asteriskSign {
        color: #F00;
        font-size: 13px;
        margin-left: -4px;
    }
    .hide{
        display:none;
    }
</style>
<div class="container">
    <div class="container-fluid">
        <div class="page-header">
            <h4>
                @ViewBag.Title
            </h4>
                <div class="pull-right"><p> @Html.ActionLink("Ticket List", "Index", "HelpDesk") </p></div>
            
        </div>
        <div class="panel panel-default">
            <div class="panel-heading" role="tab"> Create new Ticket </div>
            <div class="panel-body">
                @using (Html.BeginForm("Create", "HelpDesk", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", role = "form" }))
                {

                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })<span class="asteriskSign">*</span>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2" for="IssueType">Issue type</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.IssueType, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.IssueType, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.Description, 5, 90, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                            </div>
                        </div>

                        <div class="form-group col-md-12">
                            @Html.LabelFor(model => model.Filename, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div>
                                    <input type="file" name="browserHidden" class="file btn btn-default" id="browserHidden" multiple />
                                </div>
                            </div>
                        </div>
                        @for (int i = 0; i < Model.controltTypeData.Count; i++)
                        {
                            string cssclassdata = "";
                            <div class="form-group col-md-12">
                                @if (Model.controltTypeData[i].ControlType == "textbox")
                                {
                                    var TempTextBox = Model.controltTypeData[i].MyProperty as HelpDeskIntegration.Models.CustomTextbox;
                                    if (!TempTextBox.IsToShowCustomField)
                                    {
                                        cssclassdata = "hide";
                                    }
                                    <label class="control-label col-md-2 @cssclassdata">@TempTextBox.LabelName</label>
                                    <div class="col-md-10 @cssclassdata">
                                        @Html.TextBox(TempTextBox.CustomVariableKey, "", new { @class = "form-control" })
                                    </div>
                                }
                                else if (Model.controltTypeData[i].ControlType == "dropdown")
                                {
                                    var DropDown = (Model.controltTypeData[i].MyProperty as HelpDeskIntegration.Models.CustomDropDown);
                                    if (!DropDown.IsToShowCustomField)
                                    {
                                        cssclassdata = "hide";
                                    }
                                    var optionData = DropDown.CustomVarOptions;
                                    <label class="control-label col-md-2 @cssclassdata">@DropDown.LabelName</label>
                                    <div class="col-md-10 @cssclassdata">
                                        @Html.DropDownList(DropDown.CustomVariableKey, optionData, new { @class = "form-control" })
                                    </div>
                                }
                                else if (Model.controltTypeData[i].ControlType == "multidropdown")
                                {
                                    var DropDown = (Model.controltTypeData[i].MyProperty as HelpDeskIntegration.Models.CustomDropDown);
                                    if (DropDown.IsToShowCustomField)
                                    {
                                        cssclassdata = "hide";
                                    }
                                    var optionData = DropDown.CustomVarOptions;
                                    <label class="control-label col-md-2 @cssclassdata">@DropDown.LabelName</label>
                                    <div class="col-md-10 @cssclassdata">
                                        @Html.DropDownList(DropDown.CustomVariableKey, optionData, new { Multiple = "multiple", @class = "form-control" })
                                    </div>
                                    
                                }
                            </div>
                        }
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Create" class="btn btn-custom" />
                            </div>
                        </div>

                    </div>
                }
            </div>
        </div>
    </div>
</div>
